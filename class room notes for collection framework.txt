Object obj[] = new Object();
obj[0] = new Student();
obj[1] = new Employee();
obj[2] = new Customer();

Why Collection Framework?

Collections are nothing but group of objects stored in well defined manner. 
Earlier, Arrays are used to represent these group of objects. 
But, arrays are not re-sizable. 
size of the arrays are fixed. 
Size of the arrays can not be changed once they are defined. 
arrays dont have predefined data structures.
This causes lots of problem while handling group of objects.
 To overcome this drawback of arrays, Collection framework or simply collections are introduced in java from JDK 1.2.

LEGACY CLASSES AND INTERFACE:
Dictionary class
Vector class
Stack class
HashTable class
Properties class
Enumeration interface

Although, there were classes like Dictionary, Vector, Stack, HashTable and Properties and Enumeration interface which handle group of objects better than the arrays. 

But, each of them handle the objects differently. 

The way you use Dictionary class is totally different from the way you use Stack class and the way you use Vector class is different from the way you use Properties class. 

Hence, there needed a central and unifying theme to handle the group of objects. The collection framework is the answer to that.

What is Collection Framework In Java?

Collection Framework in java is a centralized and unified theme to store and manipulate the group of objects. 

Java Collection Framework provides some pre-defined classes and interfaces to handle the group of objects. 

Using collection framework, you can store the objects as a list or as a set or as a queue or as a map and perform operations like adding an object or removing an object or sorting the objects without much hard work.
 
Class Hierarchy Of Collection Framework :

All classes and interfaces related to Collection Framework are placed in java.util package. 

java.util.Collection class is at the top of class hierarchy of Collection Framework.

diagram shows the class hierarchy of collection framework.

collection framework in java

The entire collection framework is divided into four interfaces.

1) List  —> It handles sequential list of objects. ArrayList, Vector and LinkedList classes implement this interface.

2) Queue  —> It handles special list of objects in which elements are removed only from the head. LinkedList and PriorityQueue classes implement this interface.

3) Set  —> It handles list of objects which must contain unique element. This interface is implemented by HashSet and LinkedHashSet classes and extended by SortedSet interface which in turn, is implemented by TreeSet.

4) Map  —> This is the one interface in Collection Framework which is not inherited from Collection interface. It handles group of objects as Key/Value pairs. It is implemented by HashMap and HashTable classes and extended by SortedMap interface which in turn is implemented by TreeMap.

Three of above interfaces (List, Queue and Set) inherit from Collection interface. Although, Map is included in collection framework it does not inherit from Collection interface.


Collection framework contains 3 things.
1. core interfaces
2. set of implementation classes
3. legacy classes and interfaces(Dictionary class,Stack class,Vector class,HashTable class,Properties class and Enumeration interface)

CORE INTERFACES IN COLLECTION FRAMEWORK:
there are 4 core interfaces available in collection framework. For all interfaces in collection framework the super interface is Collection interface which extends Iterable interface present in java.lang package.
All collection framework classes and interfaces are present in java.util package.
the 4 interfaces are:
1. List interface
2. Set interface
3. Queue interface
4. Map interface
List, Set,Queue interfaces are the sub interfaces of Collection interface i.e,List,Set,Queue interfaces extends Collection interface.
But Map interface is not the sub interface of Collection interface, it is just a part of  collection framework.
Collection interface contains 15 abstract methods.one method is inherited from Iterable interface and remaining 14 methods belongs to Collection interface.
HIERARCHY OF COLLECTION FRAMEWORK CORE INTERFACES:
IMPLEMENTATION CLASSES FOR CORE INTERFACES OF COLLECTION FRAMEWORK:
interface 		Implementation class
Collection		-
List		 ArrayList, Vector,LinkedList
Set		 HashSet, LinkedHashSet
Queue		PriorityQueue, LinkedList
Map		HashMap, LinkedHashMap, 			HashTable		
SortedSet	TreeSet
NavigableSet	TreeSet
Deque		ArrayDeque,LinkedList
SortedMap	TreeMap
NavigableMap	TreeMap

other interfaces in java.util package:

Comparator interface
Iterator interface
ListIterator interface
Map.Entry interface
RandomAccess interface
Comparable interface

other classes in java.util package:
AbstractCollection class
AbstractList class
AbstractSet class
AbstractQueue  class
AbstractMap class
Calender class
Collections class
Date class
Currency class
Enum class
IdentityHashMap class
ResourceBundle class
Random class
StringTokenizer class
WeakHashMap class






